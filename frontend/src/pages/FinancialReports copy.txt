import React, { useState, useEffect } from "react";
import axios from "axios";
import { saveAs } from "file-saver";

const FinancialReports = () => {
  const [reportData, setReportData] = useState(null);
  const [detailedData, setDetailedData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [exporting, setExporting] = useState(false);
  const [filters, setFilters] = useState({
    start_date: "",
    end_date: "",
    program: "all",
    status: "all",
    search: "",
  });

  useEffect(() => {
    fetchReportData();
    fetchDetailedData();
  }, []);

  const fetchReportData = async () => {
    try {
      const response = await axios.get("/api/reports/financial/summary", {
        params: filters,
      });
      setReportData(response.data.data);
    } catch (error) {
      console.error("Error fetching report data:", error);
    }
  };

  const fetchDetailedData = async () => {
    try {
      const response = await axios.get("/api/reports/financial/detailed", {
        params: filters,
      });
      setDetailedData(response.data.data);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching detailed data:", error);
      setLoading(false);
    }
  };

  const handleFilterChange = (key, value) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleApplyFilters = () => {
    setLoading(true);
    fetchReportData();
    fetchDetailedData();
  };

  const handleResetFilters = () => {
    setFilters({
      start_date: "",
      end_date: "",
      program: "all",
      status: "all",
      search: "",
    });
  };

  const exportToExcel = async () => {
    setExporting(true);
    try {
      const response = await axios.get("/api/reports/financial/export/excel", {
        params: filters,
        responseType: "blob",
      });
      saveAs(
        new Blob([response.data]),
        `financial-report-${new Date().toISOString().split("T")[0]}.xlsx`
      );
    } catch (error) {
      console.error("Error exporting to Excel:", error);
      alert("Gagal mengekspor ke Excel");
    }
    setExporting(false);
  };

  const exportToPDF = async () => {
    setExporting(true);
    try {
      const response = await axios.get("/api/reports/financial/export/pdf", {
        params: filters,
        responseType: "blob",
      });
      saveAs(
        new Blob([response.data]),
        `financial-report-${new Date().toISOString().split("T")[0]}.pdf`
      );
    } catch (error) {
      console.error("Error exporting to PDF:", error);
      alert("Gagal mengekspor ke PDF");
    }
    setExporting(false);
  };

  const getStatusBadge = (status) => {
    const variants = {
      paid: "bg-success",
      pending: "bg-warning",
      down_payment: "bg-info",
      overdue: "bg-danger",
    };
    return <span className={`badge ${variants[status]}`}>{status}</span>;
  };

  if (loading) {
    return (
      <div className="container mt-4">
        <div className="d-flex justify-content-center">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mt-4">
      <div className="row">
        <div className="col">
          <h2>Laporan Keuangan</h2>
          <p className="text-muted">
            Monitoring dan analisis data keuangan program magang
          </p>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="row mb-4">
        <div className="col-md-3">
          <div className="card bg-primary text-white text-center">
            <div className="card-body">
              <h4 className="card-title">Total Pendapatan</h4>
              <p className="card-text h4 text-white">
                Rp{" "}
                {reportData?.summary?.total_revenue?.toLocaleString("id-ID") ||
                  0}
              </p>
              <small className="text-white">Pembayaran Lunas</small>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card bg-primary text-white text-center">
            <div className="card-body">
              <h4 className="card-title">Outstanding</h4>
              <p className="card-text h4 text-white">
                Rp{" "}
                {reportData?.summary?.total_outstanding?.toLocaleString(
                  "id-ID"
                ) || 0}
              </p>
              <small className="text-white">Belum Lunas</small>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card bg-primary text-white text-center">
            <div className="card-body">
              <h4 className="card-title">Pending</h4>
              <p className="card-text h4 text-white">
                Rp{" "}
                {reportData?.summary?.total_pending?.toLocaleString("id-ID") ||
                  0}
              </p>
              <small className="text-white">Menunggu Konfirmasi</small>
            </div>
          </div>
        </div>
        <div className="col-md-3">
          <div className="card bg-primary text-white text-center">
            <div className="card-body">
              <h4 className="card-title">Total Transaksi</h4>
              <p className="card-text h4 text-white">
                {reportData?.summary?.total_transactions || 0}
              </p>
              <small className="text-white">Semua Transaksi</small>
            </div>
          </div>
        </div>
      </div>

      {/* Filter Section */}
      <div className="card mb-4">
        <div className="card-header">
          <h5 className="mb-0">Filter & Pencarian</h5>
        </div>
        <div className="card-body">
          <div className="row">
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Tanggal Mulai</label>
                <input
                  type="date"
                  className="form-control"
                  value={filters.start_date}
                  onChange={(e) =>
                    handleFilterChange("start_date", e.target.value)
                  }
                />
              </div>
            </div>
            <div className="col-md-3">
              <div className="mb-3">
                <label className="form-label">Tanggal Akhir</label>
                <input
                  type="date"
                  className="form-control"
                  value={filters.end_date}
                  onChange={(e) =>
                    handleFilterChange("end_date", e.target.value)
                  }
                />
              </div>
            </div>
            <div className="col-md-2">
              <div className="mb-3">
                <label className="form-label">Program</label>
                <select
                  className="form-select"
                  value={filters.program}
                  onChange={(e) =>
                    handleFilterChange("program", e.target.value)
                  }
                >
                  <option value="all">Semua Program</option>
                  <option value="1">Regular</option>
                  <option value="2">Hybrid</option>
                  <option value="3">Fast Track</option>
                </select>
              </div>
            </div>
            <div className="col-md-2">
              <div className="mb-3">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  value={filters.status}
                  onChange={(e) => handleFilterChange("status", e.target.value)}
                >
                  <option value="all">Semua Status</option>
                  <option value="paid">Lunas</option>
                  <option value="pending">Pending</option>
                  <option value="down_payment">DP</option>
                  <option value="overdue">Overdue</option>
                </select>
              </div>
            </div>
            <div className="col-md-2 d-flex align-items-end">
              <button className="btn btn-primary" onClick={handleApplyFilters}>
                Terapkan Filter
              </button>
            </div>
          </div>
          <div className="row mt-2">
            <div className="col-md-6">
              <div className="mb-3">
                <label className="form-label">Cari (Nama/Email/Invoice)</label>
                <input
                  type="text"
                  className="form-control"
                  placeholder="Cari..."
                  value={filters.search}
                  onChange={(e) => handleFilterChange("search", e.target.value)}
                />
              </div>
            </div>
            <div className="col-md-6 d-flex align-items-end">
              <button
                className="btn btn-outline-secondary"
                onClick={handleResetFilters}
              >
                Reset Filter
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Export Buttons */}
      <div className="row mb-4">
        <div className="col">
          <div className="card">
            <div className="card-body">
              <h5>Ekspor Laporan</h5>
              <button
                className={`btn btn-success me-2 ${
                  exporting ? "disabled" : ""
                }`}
                onClick={exportToExcel}
                disabled={exporting}
              >
                {exporting ? "Mengekspor..." : "Export ke Excel"}
              </button>
              <button
                className={`btn btn-danger ${exporting ? "disabled" : ""}`}
                onClick={exportToPDF}
                disabled={exporting}
              >
                {exporting ? "Mengekspor..." : "Export ke PDF"}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Report Table */}
      <div className="row">
        <div className="col">
          <div className="card">
            <div className="card-header">
              <h5 className="mb-0">Detail Transaksi</h5>
            </div>
            <div className="card-body">
              {detailedData.length === 0 ? (
                <div className="alert alert-info">Tidak ada data transaksi</div>
              ) : (
                <div className="table-responsive">
                  <table className="table table-striped table-bordered table-hover align-middle">
                    <thead className="table-light">
                      <tr>
                        <th>#</th>
                        <th>Invoice</th>
                        <th>Peserta</th>
                        <th>Program</th>
                        <th>Amount</th>
                        <th>Paid</th>
                        <th>Status</th>
                        <th>Payment Date</th>
                        <th>Receipt</th>
                      </tr>
                    </thead>
                    <tbody>
                      {detailedData.map((payment, index) => (
                        <tr key={payment.id}>
                          <td>{index + 1}</td>
                          <td>
                            <small>{payment.invoice_number}</small>
                          </td>
                          <td>
                            <div>
                              <strong>{payment.full_name}</strong>
                              <br />
                              <small className="text-muted">
                                {payment.email}
                              </small>
                            </div>
                          </td>
                          <td>{payment.program_name}</td>
                          <td>Rp {payment.amount?.toLocaleString("id-ID")}</td>
                          <td>
                            Rp {payment.amount_paid?.toLocaleString("id-ID")}
                          </td>
                          <td>{getStatusBadge(payment.status)}</td>
                          <td>
                            {payment.payment_date
                              ? new Date(
                                  payment.payment_date
                                ).toLocaleDateString("id-ID")
                              : "-"}
                          </td>
                          <td>
                            {payment.receipt_number ? (
                              <span className="badge bg-success">
                                {payment.receipt_number}
                              </span>
                            ) : (
                              <span className="badge bg-secondary">-</span>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FinancialReports;
